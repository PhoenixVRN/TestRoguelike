using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä—ã - —É–ø—Ä–∞–≤–ª—è–µ—Ç UI –∏ –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã
/// </summary>
public class GameManager : MonoBehaviour
{
    [Header("–°—Å—ã–ª–∫–∏")]
    [SerializeField] private GridManager gridManager;
    [SerializeField] private WaveSpawner waveSpawner;
    [SerializeField] private BattleManager battleManager;
    
    [Header("UI")]
    [Tooltip("–ö–Ω–æ–ø–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –µ—Å—Ç—å –≥–µ—Ä–æ–∏")]
    [SerializeField] private GameObject startButton;
    
    [Tooltip("–û–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏")]
    [SerializeField] private RectTransform objectToMove;
    
    private Vector2 objectToMoveStartPosition; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏")]
    [Tooltip("–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)")]
    [SerializeField] private float moveDuration = 1f;
    
    [Tooltip("–¢–∏–ø –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è")]
    [SerializeField] private AnimationCurve moveCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")]
    [SerializeField] private bool showDebug = false;

    private int heroCount = 0;
    private bool isMoving = false;

    private void Start()
    {
        if (gridManager == null)
        {
            gridManager = FindObjectOfType<GridManager>();
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é objectToMove
        if (objectToMove != null)
        {
            objectToMoveStartPosition = objectToMove.anchoredPosition;
            
            if (showDebug)
            {
                Debug.Log($"üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è objectToMove —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {objectToMoveStartPosition}");
            }
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        UpdateButtonVisibility();
    }

    private void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        CheckHeroCount();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ
    /// </summary>
    private void CheckHeroCount()
    {
        if (gridManager == null)
            return;

        // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ (Team 0), –Ω–µ –≤—Ä–∞–≥–æ–≤!
        int currentCount = 0;
        var occupiedCells = gridManager.GetOccupiedCells();
        
        foreach (var cell in occupiedCells)
        {
            GameObject obj = cell.GetPlacedObject();
            if (obj != null)
            {
                CharacterController controller = obj.GetComponent<CharacterController>();
                if (controller != null && controller.GetTeam() == 0)
                {
                    currentCount++; // –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ (Team 0)
                }
            }
        }

        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –æ–±–Ω–æ–≤–ª—è–µ–º UI
        if (currentCount != heroCount)
        {
            heroCount = currentCount;
            UpdateButtonVisibility();

            if (showDebug)
            {
                Debug.Log($"–ì–µ—Ä–æ–µ–≤ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ: {heroCount}");
            }
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    /// </summary>
    private void UpdateButtonVisibility()
    {
        if (startButton == null)
        {
            if (showDebug)
                Debug.LogWarning("Start Button –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –∏–¥—ë—Ç –±–æ–π)
        bool isPlacementMode = gridManager != null && !gridManager.IsPlacementLocked();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ objectToMove –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ (X –±–ª–∏–∑–∫–æ –∫ 959)
        bool isInStartPosition = true;
        if (objectToMove != null)
        {
            float currentX = objectToMove.anchoredPosition.x;
            float startX = objectToMoveStartPosition.x;
            isInStartPosition = Mathf.Abs(currentX - startX) < 50f; // –î–æ–ø—É—Å–∫ 50 –ø–∏–∫—Å–µ–ª–µ–π
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏:
        // 1. –ï—Å—Ç—å –≥–µ—Ä–æ–∏ –Ω–∞ –ø–æ–ª–µ
        // 2. –ù–ï –∏–¥—ë—Ç –±–æ–π (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)
        // 3. UI –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏
        bool shouldShow = heroCount > 0 && isPlacementMode && isInStartPosition;
        
        startButton.SetActive(shouldShow);

        if (showDebug && shouldShow != startButton.activeSelf)
        {
            Debug.Log($"–ö–Ω–æ–ø–∫–∞: {(shouldShow ? "–ü–û–ö–ê–ó–ê–ù–ê" : "–°–ö–†–´–¢–ê")} | –ì–µ—Ä–æ–µ–≤: {heroCount} | –†–µ–∂–∏–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏: {isPlacementMode} | UI –Ω–∞ –º–µ—Å—Ç–µ: {isInStartPosition}");
        }
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    /// </summary>
    public void ShowButton()
    {
        if (startButton != null)
        {
            startButton.SetActive(true);
        }
    }

    /// <summary>
    /// –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    /// </summary>
    public void HideButton()
    {
        if (startButton != null)
        {
            startButton.SetActive(false);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ
    /// </summary>
    public int GetHeroCount()
    {
        return heroCount;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≥–µ—Ä–æ–∏ –Ω–∞ –ø–æ–ª–µ
    /// </summary>
    public bool HasHeroes()
    {
        return heroCount > 0;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (–Ω–∞–∑–Ω–∞—á—å—Ç–µ –≤ Inspector)
    /// </summary>
    public void OnStartButtonClicked()
    {
        if (showDebug)
        {
            Debug.Log($"üéÆ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞! –ì–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ: {heroCount}");
        }

        // –°–û–•–†–ê–ù–Ø–ï–ú –†–ê–°–°–¢–ê–ù–û–í–ö–£ –ì–ï–†–û–ï–í (–¥–ª—è —Ä–µ—Å–ø–∞–≤–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã)
        if (battleManager != null)
        {
            battleManager.SaveHeroSetup();
        }

        // –ë–õ–û–ö–ò–†–£–ï–ú –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ï–ô
        if (gridManager != null)
        {
            gridManager.LockPlacement();
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        HideButton();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        if (objectToMove != null && !isMoving)
        {
            StartCoroutine(MoveObjectToZero());
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–π (—Å –≤—Ä–∞–≥–∞–º–∏ –∏–∑ WaveSpawner –µ—Å–ª–∏ –µ—Å—Ç—å)
        if (waveSpawner != null)
        {
            StartCoroutine(SpawnWaveAndStartBattle());
        }
        else
        {
            StartBattle();
        }
    }
    
    /// <summary>
    /// –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫ X = 0
    /// </summary>
    private System.Collections.IEnumerator MoveObjectToZero()
    {
        if (objectToMove == null)
            yield break;
            
        isMoving = true;
        
        Vector2 startPos = objectToMove.anchoredPosition;
        Vector2 targetPos = new Vector2(0, startPos.y); // X = 0, Y –æ—Å—Ç–∞—ë—Ç—Å—è
        
        float elapsed = 0f;
        
        if (showDebug)
        {
            Debug.Log($"üìç –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è: {startPos} ‚Üí {targetPos}");
        }
        
        while (elapsed < moveDuration)
        {
            elapsed += Time.deltaTime;
            float t = elapsed / moveDuration;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏–≤—É—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            float curveValue = moveCurve.Evaluate(t);
            
            // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏
            objectToMove.anchoredPosition = Vector2.Lerp(startPos, targetPos, curveValue);
            
            yield return null;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        objectToMove.anchoredPosition = targetPos;
        
        isMoving = false;
        
        if (showDebug)
        {
            Debug.Log($"‚úÖ –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {objectToMove.anchoredPosition}");
        }
    }
    
    /// <summary>
    /// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫ X = 0 –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    /// </summary>
    public void MoveObjectToZeroInstant()
    {
        if (objectToMove != null)
        {
            Vector2 pos = objectToMove.anchoredPosition;
            objectToMove.anchoredPosition = new Vector2(0, pos.y);
        }
    }
    
    /// <summary>
    /// –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    /// </summary>
    public void ResetObjectPosition(Vector2 position)
    {
        if (objectToMove != null)
        {
            objectToMove.anchoredPosition = position;
        }
    }

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –±–æ–π
    /// </summary>
    private void StartBattle()
    {
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log("‚öîÔ∏è –ë–û–ô –ù–ê–ß–ê–õ–°–Ø!");
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
        var occupiedCells = gridManager.GetOccupiedCells();
        
        if (occupiedCells.Count == 0)
        {
            Debug.LogWarning("‚ùå –ù–µ—Ç –≥–µ—Ä–æ–µ–≤ –¥–ª—è –±–æ—è!");
            return;
        }
        
        Debug.Log($"üìä –í—Å–µ–≥–æ –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ: {occupiedCells.Count}");
        
        int team0Count = 0;
        int team1Count = 0;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º AI –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        foreach (var cell in occupiedCells)
        {
            GameObject heroObj = cell.GetPlacedObject();
            
            if (heroObj == null)
            {
                Debug.LogWarning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤ —è—á–µ–π–∫–µ!");
                continue;
            }
            
            CharacterController controller = heroObj.GetComponent<CharacterController>();
            
            if (controller != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                var config = controller.GetConfig();
                if (config == null)
                {
                    Debug.LogError($"‚ùå –£ {heroObj.name} –ù–ï–¢ CharacterConfig! –ù–∞–∑–Ω–∞—á—å—Ç–µ –≤ CharacterController!");
                    continue;
                }
                
                controller.StartBattle(); // –ó–∞–ø—É—Å–∫–∞–µ–º AI
                
                int team = controller.GetTeam();
                if (team == 0) team0Count++;
                else team1Count++;
                
                Debug.Log($"‚úÖ {controller.GetCharacterName()} –≥–æ—Ç–æ–≤ –∫ –±–æ—é! " +
                         $"[Team: {team}] [HP: {controller.GetMaxHealth()}] " +
                         $"[Damage: {config.damage}] " +
                         $"[Config: {config.name}]");
            }
            else
            {
                Debug.LogError($"‚ùå –£ {heroObj.name} –ù–ï–¢ CharacterController! –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç!");
                
                // –ü–æ–∫–∞–∂–µ–º –∫–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å—Ç—å
                var components = heroObj.GetComponents<Component>();
                string componentsList = "";
                foreach (var comp in components)
                {
                    componentsList += comp.GetType().Name + ", ";
                }
                Debug.Log($"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ: {componentsList}");
            }
        }
        
        Debug.Log($"üìä –ö–æ–º–∞–Ω–¥–∞ 0 (–∏–≥—Ä–æ–∫): {team0Count} –≥–µ—Ä–æ–µ–≤");
        Debug.Log($"üìä –ö–æ–º–∞–Ω–¥–∞ 1 (–≤—Ä–∞–≥–∏): {team1Count} –≥–µ—Ä–æ–µ–≤");
        
        if (team0Count > 0 && team1Count > 0)
        {
            Debug.Log("‚úÖ –û–±–µ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã! –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!");
        }
        else if (team0Count == 0)
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –≥–µ—Ä–æ–µ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ 0 (–∏–≥—Ä–æ–∫)!");
        }
        else if (team1Count == 0)
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –≥–µ—Ä–æ–µ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ 1 (–≤—Ä–∞–≥–∏)! –ù–µ–∫–æ–≥–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å!");
        }
        
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    }
    
    /// <summary>
    /// –ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å –≤–æ–ª–Ω—É –≤—Ä–∞–≥–æ–≤ –∏ –Ω–∞—á–∞—Ç—å –±–æ–π
    /// </summary>
    private System.Collections.IEnumerator SpawnWaveAndStartBattle()
    {
        Debug.Log("üåä –°–ø–∞–≤–Ω–∏–º –≤–æ–ª–Ω—É –≤—Ä–∞–≥–æ–≤...");
        
        // –°–ø–∞–≤–Ω–∏–º –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É
        waveSpawner.SpawnWave(0);
        
        // –ñ–¥—ë–º –ø–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å–ø–∞–≤–Ω
        while (waveSpawner.IsSpawning())
        {
            yield return null;
        }
        
        yield return new WaitForSeconds(0.5f); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        
        // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ–π
        StartBattle();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º Battle Manager —á—Ç–æ –±–æ–π –Ω–∞—á–∞–ª—Å—è
        if (battleManager != null)
        {
            battleManager.StartBattle();
        }
    }

    /// <summary>
    /// –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞)
    /// </summary>
    public void ResetGame()
    {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        if (gridManager != null)
        {
            gridManager.UnlockPlacement();
            gridManager.ClearAll();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞
        if (startButton != null)
        {
            startButton.SetActive(false); // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—Å—Ç—è—Ç –≥–µ—Ä–æ–µ–≤
        }
        
        heroCount = 0;
        
        if (showDebug)
        {
            Debug.Log("üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ú–æ–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –≥–µ—Ä–æ–µ–≤ —Å–Ω–æ–≤–∞.");
        }
    }

    /// <summary>
    /// –í–µ—Ä–Ω—É—Ç—å objectToMove –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (X=959) –ú–ì–ù–û–í–ï–ù–ù–û
    /// </summary>
    public void ResetObjectToMovePosition()
    {
        if (objectToMove != null)
        {
            objectToMove.anchoredPosition = objectToMoveStartPosition;
            
            if (showDebug)
            {
                Debug.Log($"‚ö° objectToMove –≤–µ—Ä–Ω—É–ª—Å—è –ú–ì–ù–û–í–ï–ù–ù–û –≤: {objectToMoveStartPosition}");
            }
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é objectToMove
    /// </summary>
    public Vector2 GetObjectToMoveStartPosition()
    {
        return objectToMoveStartPosition;
    }
}


