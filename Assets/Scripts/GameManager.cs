using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä—ã - —É–ø—Ä–∞–≤–ª—è–µ—Ç UI –∏ –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã
/// </summary>
public class GameManager : MonoBehaviour
{
    [Header("–°—Å—ã–ª–∫–∏")]
    [SerializeField] private GridManager gridManager;
    
    [Header("UI")]
    [Tooltip("–ö–Ω–æ–ø–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –µ—Å—Ç—å –≥–µ—Ä–æ–∏")]
    [SerializeField] private GameObject startButton;
    
    [Tooltip("–û–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏")]
    [SerializeField] private RectTransform objectToMove;
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏")]
    [Tooltip("–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)")]
    [SerializeField] private float moveDuration = 1f;
    
    [Tooltip("–¢–∏–ø –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è")]
    [SerializeField] private AnimationCurve moveCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")]
    [SerializeField] private bool showDebug = false;

    private int heroCount = 0;
    private bool isMoving = false;

    private void Start()
    {
        if (gridManager == null)
        {
            gridManager = FindObjectOfType<GridManager>();
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        UpdateButtonVisibility();
    }

    private void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        CheckHeroCount();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ
    /// </summary>
    private void CheckHeroCount()
    {
        if (gridManager == null)
            return;

        int currentCount = gridManager.GetOccupiedCells().Count;

        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –æ–±–Ω–æ–≤–ª—è–µ–º UI
        if (currentCount != heroCount)
        {
            heroCount = currentCount;
            UpdateButtonVisibility();

            if (showDebug)
            {
                Debug.Log($"–ì–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ: {heroCount}");
            }
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    /// </summary>
    private void UpdateButtonVisibility()
    {
        if (startButton == null)
        {
            if (showDebug)
                Debug.LogWarning("Start Button –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!");
            return;
        }

        bool shouldShow = heroCount > 0;
        startButton.SetActive(shouldShow);

        if (showDebug)
        {
            Debug.Log($"–ö–Ω–æ–ø–∫–∞: {(shouldShow ? "–ü–û–ö–ê–ó–ê–ù–ê" : "–°–ö–†–´–¢–ê")} (–≥–µ—Ä–æ–µ–≤: {heroCount})");
        }
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    /// </summary>
    public void ShowButton()
    {
        if (startButton != null)
        {
            startButton.SetActive(true);
        }
    }

    /// <summary>
    /// –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    /// </summary>
    public void HideButton()
    {
        if (startButton != null)
        {
            startButton.SetActive(false);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ
    /// </summary>
    public int GetHeroCount()
    {
        return heroCount;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≥–µ—Ä–æ–∏ –Ω–∞ –ø–æ–ª–µ
    /// </summary>
    public bool HasHeroes()
    {
        return heroCount > 0;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (–Ω–∞–∑–Ω–∞—á—å—Ç–µ –≤ Inspector)
    /// </summary>
    public void OnStartButtonClicked()
    {
        if (showDebug)
        {
            Debug.Log($"üéÆ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞! –ì–µ—Ä–æ–µ–≤ –Ω–∞ –ø–æ–ª–µ: {heroCount}");
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        if (objectToMove != null && !isMoving)
        {
            StartCoroutine(MoveObjectToZero());
        }
        
        StartBattle();
    }
    
    /// <summary>
    /// –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫ X = 0
    /// </summary>
    private System.Collections.IEnumerator MoveObjectToZero()
    {
        if (objectToMove == null)
            yield break;
            
        isMoving = true;
        
        Vector2 startPos = objectToMove.anchoredPosition;
        Vector2 targetPos = new Vector2(0, startPos.y); // X = 0, Y –æ—Å—Ç–∞—ë—Ç—Å—è
        
        float elapsed = 0f;
        
        if (showDebug)
        {
            Debug.Log($"üìç –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è: {startPos} ‚Üí {targetPos}");
        }
        
        while (elapsed < moveDuration)
        {
            elapsed += Time.deltaTime;
            float t = elapsed / moveDuration;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏–≤—É—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            float curveValue = moveCurve.Evaluate(t);
            
            // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏
            objectToMove.anchoredPosition = Vector2.Lerp(startPos, targetPos, curveValue);
            
            yield return null;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        objectToMove.anchoredPosition = targetPos;
        
        isMoving = false;
        
        if (showDebug)
        {
            Debug.Log($"‚úÖ –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {objectToMove.anchoredPosition}");
        }
    }
    
    /// <summary>
    /// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫ X = 0 –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    /// </summary>
    public void MoveObjectToZeroInstant()
    {
        if (objectToMove != null)
        {
            Vector2 pos = objectToMove.anchoredPosition;
            objectToMove.anchoredPosition = new Vector2(0, pos.y);
        }
    }
    
    /// <summary>
    /// –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    /// </summary>
    public void ResetObjectPosition(Vector2 position)
    {
        if (objectToMove != null)
        {
            objectToMove.anchoredPosition = position;
        }
    }

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –±–æ–π (–ø—Ä–∏–º–µ—Ä)
    /// </summary>
    private void StartBattle()
    {
        Debug.Log("‚öîÔ∏è –ë–û–ô –ù–ê–ß–ê–õ–°–Ø!");
        
        // –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –±–æ—è
        // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤:
        var occupiedCells = gridManager.GetOccupiedCells();
        
        foreach (var cell in occupiedCells)
        {
            GameObject hero = cell.GetPlacedObject();
            Debug.Log($"–ì–µ—Ä–æ–π –≤ –±–æ—é: {hero.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {cell.gridPosition}");
            
            // –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏
            CharacterAnimator anim = hero.GetComponent<CharacterAnimator>();
            if (anim != null)
            {
                anim.PlayAttack();
            }
        }
    }
}

