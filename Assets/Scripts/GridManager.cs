using UnityEngine;
using UnityEngine.EventSystems;
using System.Collections.Generic;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ç–∫–∏ - —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —è—á–µ–π–∫–∞–º–∏ GridCell
/// –†–∞–∑–º–µ—â–∞–π—Ç–µ GridCell –ø—É—Å—Ç—ã—à–∫–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ü–µ–Ω—Ç—Ä–∞—Ö —Ä–æ–º–±–æ–≤
/// </summary>
public class GridManager : MonoBehaviour
{
    [Header("–ü—Ä–µ—Ñ–∞–± –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")]
    [Tooltip("UI –ø—Ä–µ—Ñ–∞–±, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ")]
    [SerializeField] private GameObject prefabToPlace;
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö")]
    [SerializeField] private bool checkOccupancy = true;
    
    [Tooltip("–ü–ö–ú —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ —è—á–µ–π–∫–∏")]
    [SerializeField] private bool rightClickToRemove = true;
    
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã —è—á–µ–µ–∫ –≤ –∏–≥—Ä–µ")]
    [SerializeField] private bool showCellMarkers = false;
    
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")]
    [SerializeField] private bool showDebug = false;

    [Header("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∞–±—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")]
    [Tooltip("–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∞–±–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (1-9)")]
    [SerializeField] private GameObject[] prefabs;
    
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")]
    [SerializeField] private bool showControlHints = true;

    private List<GridCell> cells = new List<GridCell>();
    private int currentPrefabIndex = 0;
    private GameObject currentPrefab;

    private void Awake()
    {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
        cells.AddRange(GetComponentsInChildren<GridCell>());
        
        currentPrefab = prefabToPlace;
        
        Debug.Log($"GridManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {cells.Count}");
    }

    private void Start()
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
        SetAllMarkersVisible(showCellMarkers);
    }

    private void Update()
    {
        HandleInput();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    /// </summary>
    private void HandleInput()
    {
        if (prefabs == null || prefabs.Length == 0)
            return;

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–æ–≤ –Ω–∞ —Ü–∏—Ñ—Ä—ã 1-9
        for (int i = 0; i < Mathf.Min(9, prefabs.Length); i++)
        {
            if (Input.GetKeyDown(KeyCode.Alpha1 + i))
            {
                SelectPrefab(i);
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
        if (Input.GetKeyDown(KeyCode.RightArrow))
        {
            SelectPrefab((currentPrefabIndex + 1) % prefabs.Length);
        }
        else if (Input.GetKeyDown(KeyCode.LeftArrow))
        {
            SelectPrefab((currentPrefabIndex - 1 + prefabs.Length) % prefabs.Length);
        }

        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Å–µ—Ç–∫–∏ –Ω–∞ Delete
        if (Input.GetKeyDown(KeyCode.Delete))
        {
            ClearAll();
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ M
        if (Input.GetKeyDown(KeyCode.M))
        {
            showCellMarkers = !showCellMarkers;
            SetAllMarkersVisible(showCellMarkers);
            Debug.Log($"–ú–∞—Ä–∫–µ—Ä—ã —è—á–µ–µ–∫: {(showCellMarkers ? "–ü–æ–∫–∞–∑–∞–Ω—ã" : "–°–∫—Ä—ã—Ç—ã")}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –õ–ö–ú –ø–æ —è—á–µ–π–∫–µ
    /// </summary>
    public void OnCellClicked(GridCell cell, PointerEventData eventData)
    {
        GameObject prefab = GetCurrentPrefab();
        
        if (prefab == null)
        {
            Debug.LogWarning("–ü—Ä–µ—Ñ–∞–± –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å
        if (checkOccupancy && cell.IsOccupied())
        {
            if (showDebug)
            {
                Debug.Log($"–Ø—á–µ–π–∫–∞ {cell.gridPosition} —É–∂–µ –∑–∞–Ω—è—Ç–∞!");
            }
            return;
        }

        // –†–∞–∑–º–µ—â–∞–µ–º –æ–±—ä–µ–∫—Ç
        bool success = cell.PlaceObject(prefab);
        
        if (success && showDebug)
        {
            Debug.Log($"–†–∞–∑–º–µ—â–µ–Ω –æ–±—ä–µ–∫—Ç –≤ —è—á–µ–π–∫–µ {cell.gridPosition}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ü–ö–ú –ø–æ —è—á–µ–π–∫–µ
    /// </summary>
    public void OnCellRightClicked(GridCell cell, PointerEventData eventData)
    {
        if (showDebug)
        {
            Debug.Log($"üñ±Ô∏è –ü–ö–ú –ø–æ —è—á–µ–π–∫–µ {cell.gridPosition}");
        }

        if (!rightClickToRemove)
        {
            if (showDebug)
            {
                Debug.LogWarning("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ü–ö–ú –í–´–ö–õ–Æ–ß–ï–ù–û –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!");
            }
            return;
        }

        if (cell.IsOccupied())
        {
            cell.RemoveObject();
            
            if (showDebug)
            {
                Debug.Log($"‚úÖ –£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç –∏–∑ —è—á–µ–π–∫–∏ {cell.gridPosition}");
            }
        }
        else
        {
            if (showDebug)
            {
                Debug.Log($"‚ÑπÔ∏è –Ø—á–µ–π–∫–∞ {cell.gridPosition} –ø—É—Å—Ç–∞—è, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å");
            }
        }
    }

    /// <summary>
    /// –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–æ –∏–Ω–¥–µ–∫—Å—É
    /// </summary>
    public void SelectPrefab(int index)
    {
        if (prefabs == null || prefabs.Length == 0)
            return;

        if (index < 0 || index >= prefabs.Length)
        {
            Debug.LogWarning($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ—Ñ–∞–±–∞: {index}");
            return;
        }

        currentPrefabIndex = index;
        currentPrefab = prefabs[index];
        
        Debug.Log($"–í—ã–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∞–± [{index + 1}/{prefabs.Length}]: {currentPrefab.name}");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∞–±
    /// </summary>
    public void SetCurrentPrefab(GameObject prefab)
    {
        currentPrefab = prefab;
        
        if (showDebug)
        {
            Debug.Log($"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∞–±: {(prefab != null ? prefab.name : "null")}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∞–±
    /// </summary>
    public GameObject GetCurrentPrefab()
    {
        return currentPrefab ?? prefabToPlace;
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏
    /// </summary>
    public void ClearAll()
    {
        foreach (var cell in cells)
        {
            cell.RemoveObject();
        }
        
        Debug.Log("–í—Å–µ —è—á–µ–π–∫–∏ –æ—á–∏—â–µ–Ω—ã!");
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
    /// </summary>
    public void SetAllMarkersVisible(bool visible)
    {
        showCellMarkers = visible;
        
        foreach (var cell in cells)
        {
            cell.SetMarkerVisible(visible);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —è—á–µ–π–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    /// </summary>
    public GridCell GetCell(Vector2Int gridPosition)
    {
        return cells.Find(c => c.gridPosition == gridPosition);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏
    /// </summary>
    public List<GridCell> GetAllCells()
    {
        return new List<GridCell>(cells);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
    /// </summary>
    public List<GridCell> GetOccupiedCells()
    {
        return cells.FindAll(c => c.IsOccupied());
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏
    /// </summary>
    public List<GridCell> GetFreeCells()
    {
        return cells.FindAll(c => !c.IsOccupied());
    }

    private void OnGUI()
    {
        if (!showControlHints || (prefabs == null || prefabs.Length == 0))
            return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        GUIStyle style = new GUIStyle();
        style.fontSize = 16;
        style.normal.textColor = Color.white;
        style.alignment = TextAnchor.UpperLeft;

        string help = "‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï ‚ïê‚ïê‚ïê\n";
        help += $"1-{Mathf.Min(9, prefabs.Length)} - –≤—ã–±–æ—Ä –ø—Ä–µ—Ñ–∞–±–∞\n";
        help += "‚Üê ‚Üí - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ\n";
        help += "–õ–ö–ú - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å\n";
        help += "–ü–ö–ú - —É–¥–∞–ª–∏—Ç—å\n";
        help += "M - –≤–∫–ª/–≤—ã–∫–ª –º–∞—Ä–∫–µ—Ä—ã\n";
        help += "Delete - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë\n\n";
        help += $"–ü—Ä–µ—Ñ–∞–±: [{currentPrefabIndex + 1}/{prefabs.Length}]\n";
        help += $"{GetCurrentPrefab().name}\n\n";
        help += $"–Ø—á–µ–µ–∫: {cells.Count}\n";
        help += $"–ó–∞–Ω—è—Ç–æ: {GetOccupiedCells().Count}\n";
        help += $"–°–≤–æ–±–æ–¥–Ω–æ: {GetFreeCells().Count}";

        GUI.Label(new Rect(10, 10, 400, 300), help, style);
    }
}

