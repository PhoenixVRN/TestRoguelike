using UnityEngine;
using UnityEngine.EventSystems;
using System.Collections.Generic;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ç–∫–∏ - —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —è—á–µ–π–∫–∞–º–∏ GridCell
/// –†–∞–∑–º–µ—â–∞–π—Ç–µ GridCell –ø—É—Å—Ç—ã—à–∫–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ü–µ–Ω—Ç—Ä–∞—Ö —Ä–æ–º–±–æ–≤
/// </summary>
public class GridManager : MonoBehaviour
{
    [Header("–ü—Ä–µ—Ñ–∞–± –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")]
    [Tooltip("UI –ø—Ä–µ—Ñ–∞–±, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ")]
    [SerializeField] private GameObject prefabToPlace;
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö")]
    [SerializeField] private bool checkOccupancy = true;
    
    [Tooltip("–ü–ö–ú —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ —è—á–µ–π–∫–∏")]
    [SerializeField] private bool rightClickToRemove = true;
    
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã —è—á–µ–µ–∫ –≤ –∏–≥—Ä–µ")]
    [SerializeField] private bool showCellMarkers = false;
    
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")]
    [SerializeField] private bool showDebug = false;

    [Header("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∞–±—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")]
    [Tooltip("–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∞–±–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (1-9)")]
    [SerializeField] private GameObject[] prefabs;
    
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")]
    [SerializeField] private bool showControlHints = true;

    private List<GridCell> cells = new List<GridCell>();
    private int currentPrefabIndex = 0;
    private GameObject currentPrefab;
    private bool isPlacementLocked = false; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

    private void Awake()
    {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
        cells.AddRange(GetComponentsInChildren<GridCell>());
        
        currentPrefab = prefabToPlace;
        
        Debug.Log($"GridManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {cells.Count}");
    }

    private void Start()
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
        SetAllMarkersVisible(showCellMarkers);
    }

    private void Update()
    {
        HandleInput();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    /// </summary>
    private void HandleInput()
    {
        if (prefabs == null || prefabs.Length == 0)
            return;

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–æ–≤ –Ω–∞ —Ü–∏—Ñ—Ä—ã 1-9
        for (int i = 0; i < Mathf.Min(9, prefabs.Length); i++)
        {
            if (Input.GetKeyDown(KeyCode.Alpha1 + i))
            {
                SelectPrefab(i);
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
        if (Input.GetKeyDown(KeyCode.RightArrow))
        {
            SelectPrefab((currentPrefabIndex + 1) % prefabs.Length);
        }
        else if (Input.GetKeyDown(KeyCode.LeftArrow))
        {
            SelectPrefab((currentPrefabIndex - 1 + prefabs.Length) % prefabs.Length);
        }

        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Å–µ—Ç–∫–∏ –Ω–∞ Delete
        if (Input.GetKeyDown(KeyCode.Delete))
        {
            ClearAll();
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ M
        if (Input.GetKeyDown(KeyCode.M))
        {
            showCellMarkers = !showCellMarkers;
            SetAllMarkersVisible(showCellMarkers);
            Debug.Log($"–ú–∞—Ä–∫–µ—Ä—ã —è—á–µ–µ–∫: {(showCellMarkers ? "–ü–æ–∫–∞–∑–∞–Ω—ã" : "–°–∫—Ä—ã—Ç—ã")}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –õ–ö–ú –ø–æ —è—á–µ–π–∫–µ
    /// </summary>
    public void OnCellClicked(GridCell cell, PointerEventData eventData)
    {
        // –ë–õ–û–ö–ò–†–û–í–ö–ê: –ï—Å–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫
        if (isPlacementLocked)
        {
            if (showDebug)
            {
                Debug.Log("üîí –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! –ë–æ–π —É–∂–µ –Ω–∞—á–∞–ª—Å—è.");
            }
            return;
        }
        
        GameObject prefab = GetCurrentPrefab();
        
        if (prefab == null)
        {
            Debug.LogWarning("–ü—Ä–µ—Ñ–∞–± –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å
        if (checkOccupancy && cell.IsOccupied())
        {
            if (showDebug)
            {
                Debug.Log($"–Ø—á–µ–π–∫–∞ {cell.gridPosition} —É–∂–µ –∑–∞–Ω—è—Ç–∞!");
            }
            return;
        }

        // –†–∞–∑–º–µ—â–∞–µ–º –æ–±—ä–µ–∫—Ç
        bool success = cell.PlaceObject(prefab);
        
        if (success && showDebug)
        {
            Debug.Log($"–†–∞–∑–º–µ—â–µ–Ω –æ–±—ä–µ–∫—Ç –≤ —è—á–µ–π–∫–µ {cell.gridPosition}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ü–ö–ú –ø–æ —è—á–µ–π–∫–µ
    /// </summary>
    public void OnCellRightClicked(GridCell cell, PointerEventData eventData)
    {
        // –ë–õ–û–ö–ò–†–û–í–ö–ê: –ï—Å–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∑–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        if (isPlacementLocked)
        {
            if (showDebug)
            {
                Debug.Log("üîí –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! –ë–æ–π —É–∂–µ –Ω–∞—á–∞–ª—Å—è.");
            }
            return;
        }
        
        if (showDebug)
        {
            Debug.Log($"üñ±Ô∏è –ü–ö–ú –ø–æ —è—á–µ–π–∫–µ {cell.gridPosition}");
        }

        if (!rightClickToRemove)
        {
            if (showDebug)
            {
                Debug.LogWarning("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ü–ö–ú –í–´–ö–õ–Æ–ß–ï–ù–û –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!");
            }
            return;
        }

        if (cell.IsOccupied())
        {
            cell.RemoveObject();
            
            if (showDebug)
            {
                Debug.Log($"‚úÖ –£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç –∏–∑ —è—á–µ–π–∫–∏ {cell.gridPosition}");
            }
        }
        else
        {
            if (showDebug)
            {
                Debug.Log($"‚ÑπÔ∏è –Ø—á–µ–π–∫–∞ {cell.gridPosition} –ø—É—Å—Ç–∞—è, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å");
            }
        }
    }

    /// <summary>
    /// –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–æ –∏–Ω–¥–µ–∫—Å—É
    /// </summary>
    public void SelectPrefab(int index)
    {
        if (prefabs == null || prefabs.Length == 0)
            return;

        if (index < 0 || index >= prefabs.Length)
        {
            Debug.LogWarning($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ—Ñ–∞–±–∞: {index}");
            return;
        }

        currentPrefabIndex = index;
        currentPrefab = prefabs[index];
        
        Debug.Log($"–í—ã–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∞–± [{index + 1}/{prefabs.Length}]: {currentPrefab.name}");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∞–±
    /// </summary>
    public void SetCurrentPrefab(GameObject prefab)
    {
        currentPrefab = prefab;
        
        if (showDebug)
        {
            Debug.Log($"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∞–±: {(prefab != null ? prefab.name : "null")}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∞–±
    /// </summary>
    public GameObject GetCurrentPrefab()
    {
        return currentPrefab ?? prefabToPlace;
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏
    /// </summary>
    public void ClearAll()
    {
        foreach (var cell in cells)
        {
            cell.RemoveObject();
        }
        
        Debug.Log("–í—Å–µ —è—á–µ–π–∫–∏ –æ—á–∏—â–µ–Ω—ã!");
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
    /// </summary>
    public void SetAllMarkersVisible(bool visible)
    {
        showCellMarkers = visible;
        
        foreach (var cell in cells)
        {
            cell.SetMarkerVisible(visible);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —è—á–µ–π–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    /// </summary>
    public GridCell GetCell(Vector2Int gridPosition)
    {
        return cells.Find(c => c.gridPosition == gridPosition);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏
    /// </summary>
    public List<GridCell> GetAllCells()
    {
        return new List<GridCell>(cells);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
    /// </summary>
    public List<GridCell> GetOccupiedCells()
    {
        return cells.FindAll(c => c.IsOccupied());
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏
    /// </summary>
    public List<GridCell> GetFreeCells()
    {
        return cells.FindAll(c => !c.IsOccupied());
    }

    /// <summary>
    /// –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–±–æ–π –Ω–∞—á–∞–ª—Å—è)
    /// </summary>
    public void LockPlacement()
    {
        isPlacementLocked = true;
        
        if (showDebug)
        {
            Debug.Log("üîí –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û!");
        }
    }

    /// <summary>
    /// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ)
    /// </summary>
    public void UnlockPlacement()
    {
        isPlacementLocked = false;
        
        if (showDebug)
        {
            Debug.Log("üîì –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û!");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    /// </summary>
    public bool IsPlacementLocked()
    {
        return isPlacementLocked;
    }

    private void OnGUI()
    {
        if (!showControlHints || (prefabs == null || prefabs.Length == 0))
            return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        GUIStyle style = new GUIStyle();
        style.fontSize = 16;
        style.normal.textColor = Color.white;
        style.alignment = TextAnchor.UpperLeft;

        string help = "‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï ‚ïê‚ïê‚ïê\n";
        help += $"1-{Mathf.Min(9, prefabs.Length)} - –≤—ã–±–æ—Ä –ø—Ä–µ—Ñ–∞–±–∞\n";
        help += "‚Üê ‚Üí - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ\n";
        help += "–õ–ö–ú - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å\n";
        help += "–ü–ö–ú - —É–¥–∞–ª–∏—Ç—å\n";
        help += "M - –≤–∫–ª/–≤—ã–∫–ª –º–∞—Ä–∫–µ—Ä—ã\n";
        help += "Delete - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë\n\n";
        help += $"–ü—Ä–µ—Ñ–∞–±: [{currentPrefabIndex + 1}/{prefabs.Length}]\n";
        help += $"{GetCurrentPrefab().name}\n\n";
        help += $"–Ø—á–µ–µ–∫: {cells.Count}\n";
        help += $"–ó–∞–Ω—è—Ç–æ: {GetOccupiedCells().Count}\n";
        help += $"–°–≤–æ–±–æ–¥–Ω–æ: {GetFreeCells().Count}";

        GUI.Label(new Rect(10, 10, 400, 300), help, style);
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    [ContextMenu("üìç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")]
    private void ShowAllCoordinates()
    {
        // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ –∑–∞–Ω–æ–≤–æ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ Edit mode)
        GridCell[] allCells = GetComponentsInChildren<GridCell>();
        
        if (allCells.Length == 0)
        {
            Debug.LogWarning("‚ùå –Ø—á–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:");
            Debug.LogWarning("   1. GridCell –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ Hierarchy");
            Debug.LogWarning("   2. –û–Ω–∏ —è–≤–ª—è—é—Ç—Å—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ Grid");
            Debug.LogWarning("   3. –£ –Ω–∏—Ö –µ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç GridCell");
            return;
        }

        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log($"‚úÖ –î–û–°–¢–£–ü–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´ ({allCells.Length} —è—á–µ–µ–∫):");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");

        // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ—Ç–∫–∏
        int minX = int.MaxValue;
        int maxX = int.MinValue;
        int minY = int.MaxValue;
        int maxY = int.MinValue;

        foreach (var cell in allCells)
        {
            if (cell.gridPosition.x < minX) minX = cell.gridPosition.x;
            if (cell.gridPosition.x > maxX) maxX = cell.gridPosition.x;
            if (cell.gridPosition.y < minY) minY = cell.gridPosition.y;
            if (cell.gridPosition.y > maxY) maxY = cell.gridPosition.y;
        }

        Debug.Log($"üìê –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏: X=[{minX}..{maxX}], Y=[{minY}..{maxY}]\n");

        // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —Å—Ç–æ—Ä–æ–Ω—ã
        int middleX = (minX + maxX) / 2;

        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–∏–≥—Ä–æ–∫)
        Debug.Log($"<color=cyan>üõ°Ô∏è –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (Team 0 - –∏–≥—Ä–æ–∫, X ‚â§ {middleX}):</color>");
        string leftCoords = "";
        int leftCount = 0;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        System.Array.Sort(allCells, (a, b) => {
            if (a.gridPosition.x != b.gridPosition.x)
                return a.gridPosition.x.CompareTo(b.gridPosition.x);
            return a.gridPosition.y.CompareTo(b.gridPosition.y);
        });
        
        foreach (var cell in allCells)
        {
            if (cell.gridPosition.x <= middleX)
            {
                leftCoords += $"({cell.gridPosition.x},{cell.gridPosition.y}), ";
                leftCount++;
                if (leftCount % 6 == 0) leftCoords += "\n";
            }
        }
        if (leftCount > 0)
            Debug.Log(leftCoords.TrimEnd(',', ' '));
        else
            Debug.Log("(–Ω–µ—Ç —è—á–µ–µ–∫)");

        Debug.Log("");

        // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤—Ä–∞–≥–∏)
        Debug.Log($"<color=red>‚öîÔ∏è –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (Team 1 - –≤—Ä–∞–≥–∏, X > {middleX}):</color>");
        string rightCoords = "";
        int rightCount = 0;
        foreach (var cell in allCells)
        {
            if (cell.gridPosition.x > middleX)
            {
                rightCoords += $"({cell.gridPosition.x},{cell.gridPosition.y}), ";
                rightCount++;
                if (rightCount % 6 == 0) rightCoords += "\n";
            }
        }
        if (rightCount > 0)
            Debug.Log(rightCoords.TrimEnd(',', ' '));
        else
            Debug.Log("(–Ω–µ—Ç —è—á–µ–µ–∫)");

        Debug.Log("");
        Debug.Log($"üí° –î–õ–Ø WAVE CONFIG:");
        Debug.Log($"   ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ü–†–ê–í–û–ô —Å—Ç–æ—Ä–æ–Ω—ã (–∫—Ä–∞—Å–Ω—ã–µ)");
        Debug.Log($"   ‚Üí –ò–õ–ò –≤–∫–ª—é—á–∏—Ç–µ Random Position –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:");
        Debug.Log($"      Spawn Zone X: ({middleX + 1}, {maxX})");
        Debug.Log($"      Spawn Zone Y: ({minY}, {maxY})");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    }

    [ContextMenu("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∫–∏")]
    private void ShowGridStats()
    {
        // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ –∑–∞–Ω–æ–≤–æ
        GridCell[] allCells = GetComponentsInChildren<GridCell>();
        
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ö–ò:");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log($"–í—Å–µ–≥–æ —è—á–µ–µ–∫: {allCells.Length}");
        
        if (Application.isPlaying)
        {
            Debug.Log($"–ó–∞–Ω—è—Ç–æ: {GetOccupiedCells().Count}");
            Debug.Log($"–°–≤–æ–±–æ–¥–Ω–æ: {GetFreeCells().Count}");
            Debug.Log($"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {(isPlacementLocked ? "–î–ê üîí" : "–ù–ï–¢ üîì")}");
        }
        else
        {
            Debug.Log("‚è∏Ô∏è (–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)");
        }
        
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    }

#if UNITY_EDITOR
    [ContextMenu("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏")]
    private void AutoAssignCoordinates()
    {
        GridCell[] allCells = GetComponentsInChildren<GridCell>();
        
        if (allCells.Length == 0)
        {
            Debug.LogWarning("‚ùå –Ø—á–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            return;
        }

        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log($"üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ö–û–û–†–î–ò–ù–ê–¢ ({allCells.Length} —è—á–µ–µ–∫)");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —è—á–µ–µ–∫
        float minX = float.MaxValue;
        float maxX = float.MinValue;
        float minY = float.MaxValue;
        float maxY = float.MinValue;

        foreach (var cell in allCells)
        {
            Vector3 pos = cell.transform.position;
            if (pos.x < minX) minX = pos.x;
            if (pos.x > maxX) maxX = pos.x;
            if (pos.y < minY) minY = pos.y;
            if (pos.y > maxY) maxY = pos.y;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —à–∞–≥ —Å–µ—Ç–∫–∏
        float stepX = 0;
        float stepY = 0;
        
        // –ò—â–µ–º –¥–≤–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–∞–∑–Ω—ã—Ö X
        for (int i = 0; i < allCells.Length; i++)
        {
            for (int j = i + 1; j < allCells.Length; j++)
            {
                float diffX = Mathf.Abs(allCells[i].transform.position.x - allCells[j].transform.position.x);
                if (diffX > 0.01f && (stepX == 0 || diffX < stepX))
                    stepX = diffX;
                    
                float diffY = Mathf.Abs(allCells[i].transform.position.y - allCells[j].transform.position.y);
                if (diffY > 0.01f && (stepY == 0 || diffY < stepY))
                    stepY = diffY;
            }
        }

        if (stepX == 0) stepX = 100; // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —è—á–µ–π–∫–∞ –ø–æ X
        if (stepY == 0) stepY = 100; // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —è—á–µ–π–∫–∞ –ø–æ Y

        Debug.Log($"üìê –ì—Ä–∞–Ω–∏—Ü—ã —Å–µ—Ç–∫–∏: X=[{minX:F1}..{maxX:F1}], Y=[{minY:F1}..{maxY:F1}]");
        Debug.Log($"üìè –®–∞–≥ —Å–µ—Ç–∫–∏: X={stepX:F1}, Y={stepY:F1}");

        int updatedCount = 0;

        foreach (var cell in allCells)
        {
            Vector3 pos = cell.transform.position;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
            int gridX = Mathf.RoundToInt((pos.x - minX) / stepX);
            int gridY = Mathf.RoundToInt((pos.y - minY) / stepY);

            Vector2Int oldCoord = cell.gridPosition;
            cell.gridPosition = new Vector2Int(gridX, gridY);
            
            // –ü–æ–º–µ—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            UnityEditor.EditorUtility.SetDirty(cell);
            
            updatedCount++;
        }

        Debug.Log($"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {updatedCount}");
        Debug.Log("üíæ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –°–û–•–†–ê–ù–ò–¢–¨ —Å—Ü–µ–Ω—É! (Ctrl+S)");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ShowAllCoordinates();
    }

    [ContextMenu("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é (—Å–µ—Ç–∫–∞ 10x10)")]
    private void AutoAssignCoordinates10x10()
    {
        GridCell[] allCells = GetComponentsInChildren<GridCell>();
        
        if (allCells.Length == 0)
        {
            Debug.LogWarning("‚ùå –Ø—á–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            return;
        }

        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log($"üîß –£–°–¢–ê–ù–û–í–ö–ê –ö–û–û–†–î–ò–ù–ê–¢ 10x10 ({allCells.Length} —è—á–µ–µ–∫)");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ, —Å–Ω–∏–∑—É-–≤–≤–µ—Ä—Ö)
        System.Array.Sort(allCells, (a, b) => {
            float diffY = a.transform.position.y - b.transform.position.y;
            if (Mathf.Abs(diffY) > 0.1f)
                return diffY < 0 ? -1 : 1;
            float diffX = a.transform.position.x - b.transform.position.x;
            return diffX < 0 ? -1 : 1;
        });

        int gridWidth = 10; // –®–∏—Ä–∏–Ω–∞ —Å–µ—Ç–∫–∏
        int updatedCount = 0;

        for (int i = 0; i < allCells.Length; i++)
        {
            int gridX = i % gridWidth;
            int gridY = i / gridWidth;

            allCells[i].gridPosition = new Vector2Int(gridX, gridY);
            UnityEditor.EditorUtility.SetDirty(allCells[i]);
            
            updatedCount++;
        }

        Debug.Log($"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {updatedCount}");
        Debug.Log($"üìê –°–µ—Ç–∫–∞: {gridWidth}x{(allCells.Length / gridWidth)}");
        Debug.Log("üíæ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –°–û–•–†–ê–ù–ò–¢–¨ —Å—Ü–µ–Ω—É! (Ctrl+S)");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        
        ShowAllCoordinates();
    }
#endif
}

