using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–∑–±–µ–≥–∞–Ω–∏—è —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
/// –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ NavMesh –∏ A* - –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
/// </summary>
public class CollisionAvoidance : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–±–µ–≥–∞–Ω–∏—è")]
    [Tooltip("–†–∞–¥–∏—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")]
    [SerializeField] private float avoidanceRadius = 50f;
    
    [Tooltip("–°–∏–ª–∞ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")]
    [SerializeField] private float avoidanceForce = 100f;
    
    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –¥—Ä—É–≥–∏—Ö (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)")]
    [SerializeField] private float personalSpace = 30f;
    
    [Tooltip("–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—é–∑–Ω–∏–∫–æ–≤ (—Ç–æ–π –∂–µ –∫–æ–º–∞–Ω–¥—ã)")]
    [SerializeField] private bool avoidOnlyAllies = true;
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")]
    [SerializeField] private bool showDebug = false;

    private CharacterController characterController;
    private RectTransform rectTransform;
    private Vector2 avoidanceVelocity = Vector2.zero;

    private void Awake()
    {
        characterController = GetComponent<CharacterController>();
        rectTransform = GetComponent<RectTransform>();
    }

    private void LateUpdate()
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–±–µ–≥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–≥–∞–µ—Ç—Å—è
        if (characterController != null && 
            (characterController.GetCurrentState() == CharacterController.CharacterState.Moving ||
             characterController.GetCurrentState() == CharacterController.CharacterState.Attacking))
        {
            ApplyAvoidance();
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–±–µ–≥–∞–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    /// </summary>
    private void ApplyAvoidance()
    {
        Vector2 separationForce = CalculateSeparation();
        
        if (separationForce.magnitude > 0.01f)
        {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è
            rectTransform.position += (Vector3)separationForce * Time.deltaTime;
            
            if (showDebug && Time.frameCount % 60 == 0)
            {
                Debug.Log($"üö´ {gameObject.name} –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è –æ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤: {separationForce.magnitude:F1}");
            }
        }
    }

    /// <summary>
    /// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–ª—É –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è –æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    /// </summary>
    private Vector2 CalculateSeparation()
    {
        Vector2 separationForce = Vector2.zero;
        int neighborCount = 0;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
        CharacterController[] allCharacters = FindObjectsOfType<CharacterController>();

        foreach (var other in allCharacters)
        {
            if (other == characterController || other.IsDead())
                continue;

            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—é–∑–Ω–∏–∫–æ–≤
            if (avoidOnlyAllies && other.GetTeam() != characterController.GetTeam())
                continue;

            float distance = Vector2.Distance(transform.position, other.transform.position);

            // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ
            if (distance < avoidanceRadius && distance > 0.1f)
            {
                // –í–µ–∫—Ç–æ—Ä –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –Ω–∞–º
                Vector2 diff = (Vector2)(transform.position - other.transform.position);
                
                // –ß–µ–º –±–ª–∏–∂–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
                float strength = 1f - (distance / avoidanceRadius);
                
                // –ï—Å–ª–∏ –û–ß–ï–ù–¨ –±–ª–∏–∑–∫–æ - —É—Å–∏–ª–∏–≤–∞–µ–º –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
                if (distance < personalSpace)
                {
                    strength *= 2f;
                }
                
                separationForce += diff.normalized * strength * avoidanceForce;
                neighborCount++;
            }
        }

        // –£—Å—Ä–µ–¥–Ω—è–µ–º –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Å–æ—Å–µ–¥–µ–π
        if (neighborCount > 0)
        {
            separationForce /= neighborCount;
        }

        return separationForce;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø—É—Ç—å –∫ —Ü–µ–ª–∏
    /// </summary>
    public bool IsPathClear(Vector2 targetPosition)
    {
        CharacterController[] allCharacters = FindObjectsOfType<CharacterController>();
        Vector2 direction = (targetPosition - (Vector2)transform.position).normalized;
        float distance = Vector2.Distance(transform.position, targetPosition);

        foreach (var other in allCharacters)
        {
            if (other == characterController || other.IsDead())
                continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—é–∑–Ω–∏–∫–æ–≤
            if (avoidOnlyAllies && other.GetTeam() != characterController.GetTeam())
                continue;

            Vector2 toOther = (Vector2)other.transform.position - (Vector2)transform.position;
            float distToOther = toOther.magnitude;

            // –ï—Å–ª–∏ —Å–æ—é–∑–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏
            if (distToOther < distance)
            {
                float angle = Vector2.Angle(direction, toOther.normalized);
                
                // –ï—Å–ª–∏ —Å–æ—é–∑–Ω–∏–∫ –ø—Ä—è–º–æ –ø–æ –∫—É—Ä—Å—É
                if (angle < 30f && distToOther < personalSpace * 2)
                {
                    return false; // –ü—É—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                }
            }
        }

        return true; // –ü—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω
    }

    private void OnDrawGizmosSelected()
    {
        if (!showDebug)
            return;

        // –†–∏—Å—É–µ–º —Ä–∞–¥–∏—É—Å –∏–∑–±–µ–≥–∞–Ω–∏—è
        Gizmos.color = new Color(1f, 1f, 0f, 0.3f);
        Gizmos.DrawWireSphere(transform.position, avoidanceRadius);

        // –†–∏—Å—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        Gizmos.color = new Color(1f, 0f, 0f, 0.5f);
        Gizmos.DrawWireSphere(transform.position, personalSpace);
    }
}

