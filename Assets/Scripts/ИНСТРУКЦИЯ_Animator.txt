═══════════════════════════════════════════════════════════════
    НАСТРОЙКА АНИМАЦИЙ ПЕРСОНАЖА - Пошаговая инструкция
═══════════════════════════════════════════════════════════════

📋 ШАГ 1: СОЗДАНИЕ ANIMATOR CONTROLLER
────────────────────────────────────────────────────────────────

1. **Project** → Assets → ПКМ → **Create → Animator Controller**
2. Назовите **"CharacterAnimator"**
3. Двойной клик → откроется окно Animator

═══════════════════════════════════════════════════════════════

📋 ШАГ 2: СОЗДАНИЕ АНИМАЦИЙ
────────────────────════════────────────────────────────────────

Для каждой анимации (Idle, Move, Attack, Death):

1. **Project** → Assets → ПКМ → **Create → Animation**
2. Назовите:
   - **Idle_Anim**
   - **Move_Anim**
   - **Attack_Anim**
   - **Death_Anim**

═══════════════════════════════════════════════════════════════

📋 ШАГ 3: ЗАПОЛНЕНИЕ АНИМАЦИЙ СПРАЙТАМИ
────────────────────────────────────────────────────────────────

Для каждой анимации:

**Idle:**
1. Двойной клик на **Idle_Anim**
2. Откроется окно **Animation**
3. Выделите все спрайты idle_0 - idle_19 из Assets/Art/idle
4. Перетащите в окно Animation
5. Установите **Sample Rate**: 10 (10 кадров в секунду)

**Move:**
1. Двойной клик на **Move_Anim**
2. Спрайты move_0 - move_7
3. **Sample Rate**: 8

**Attack:**
1. Двойной клик на **Attack_Anim**
2. Спрайты attack_0 - attack_6
3. **Sample Rate**: 8

**Death:**
1. Двойной клик на **Death_Anim**
2. Спрайты death_0 - death_5
3. **Sample Rate**: 5
4. **Loop**: ВЫКЛЮЧИТЬ (галочку снять!) ⭐

═══════════════════════════════════════════════════════════════

📋 ШАГ 4: НАСТРОЙКА ANIMATOR CONTROLLER
────────────────────────────────────────────────────────────────

Откройте **CharacterAnimator** в окне Animator:

1. **Добавьте состояния:**
   - ПКМ → Create State → Empty
   - Создайте 4 состояния: **Idle, Move, Attack, Death**
   
2. **Назначьте анимации:**
   - Выберите состояние **Idle** → Inspector → Motion: **Idle_Anim**
   - Выберите **Move** → Motion: **Move_Anim**
   - Выберите **Attack** → Motion: **Attack_Anim**
   - Выберите **Death** → Motion: **Death_Anim**

3. **Установите Idle как Default:**
   - ПКМ на **Idle** → **Set as Layer Default State**
   - Должен стать оранжевым

4. **Создайте Parameters (слева):**
   - **+ → Trigger** → назовите **"Idle"**
   - **+ → Trigger** → назовите **"Move"**
   - **+ → Trigger** → назовите **"Attack"**
   - **+ → Trigger** → назовите **"Death"**
   - **+ → Bool** → назовите **"IsDead"**

5. **Создайте Transitions (переходы):**

   **Из Any State:**
   - Any State → Idle (ПКМ на Any State → Make Transition → Idle)
     Условие: Trigger = Idle
   
   - Any State → Move
     Условие: Trigger = Move
   
   - Any State → Attack
     Условие: Trigger = Attack
   
   - Any State → Death
     Условие: Trigger = Death

   **Настройки каждого Transition:**
   - Has Exit Time: ✓ (для Attack и Death)
   - Has Exit Time: ❌ (для Idle и Move)
   - Transition Duration: 0.1

   **Из Attack в Idle:**
   - Attack → Idle
   - Условие: нет (автоматически после завершения)
   - Has Exit Time: ✓

═══════════════════════════════════════════════════════════════

📋 ШАГ 5: НАСТРОЙКА ПРЕФАБА CHARACTER
────────────────────────────────────────────────────────────────

1. Откройте префаб **Character** в **Assets/Prefabs**
2. Убедитесь что есть компонент **Image**
3. **Add Component → Animator**
   - Controller: **CharacterAnimator** ⭐
   - Avatar: None
   - Apply Root Motion: ❌
   - Update Mode: Normal
   - Culling Mode: Always Animate

4. **Add Component → Character Animator** (наш скрипт)
   - Show Debug: ✓ (для тестирования)

═══════════════════════════════════════════════════════════════

📋 ШАГ 6: ТЕСТИРОВАНИЕ
────────────────────────────────────────────────────────────────

1. Перетащите префаб **Character** в сцену
2. Выберите его в Hierarchy
3. ПКМ на компоненте **Character Animator**:
   - **Тест: Idle** → должна воспроизвестись анимация
   - **Тест: Move** → анимация движения
   - **Тест: Attack** → атака
   - **Тест: Death** → смерть

Если анимации играют - всё настроено правильно! ✅

═══════════════════════════════════════════════════════════════

💡 ИСПОЛЬЗОВАНИЕ В КОДЕ
────────────────────────────────────────────────────────────────

```csharp
// Получить компонент
CharacterAnimator charAnim = GetComponent<CharacterAnimator>();

// Управление анимациями
charAnim.PlayIdle();      // Покой
charAnim.PlayMove();      // Движение
charAnim.PlayAttack();    // Атака
charAnim.PlayDeath();     // Смерть
charAnim.Resurrect();     // Воскресить

// Проверки
if (charAnim.IsDead())
{
    Debug.Log("Персонаж мёртв!");
}

// Получить текущее состояние
var state = charAnim.GetCurrentState();
```

═══════════════════════════════════════════════════════════════

🎯 ANIMATION EVENTS (опционально)
────────────────────────────────────────────────────────────────

Для вызова методов в нужный момент анимации:

1. Откройте **Attack_Anim** в окне Animation
2. Найдите кадр где происходит удар (например кадр 3)
3. Кликните на линию времени
4. **Add Event** (кнопка справа)
5. Function: **OnAttackHit** (из CharacterAnimator)

Аналогично можно добавить:
- **OnAttackComplete** - в конце Attack_Anim
- **OnDeathComplete** - в конце Death_Anim

═══════════════════════════════════════════════════════════════

❓ ПРОБЛЕМЫ И РЕШЕНИЯ
────────────────────────────────────────────────────────────────

❌ Анимации не играют
   ✅ Проверьте что Animator.Controller назначен
   ✅ Проверьте что Image.Sprite пустой (анимация сама меняет спрайты)

❌ Спрайты не меняются
   ✅ Убедитесь что анимации созданы правильно
   ✅ Проверьте что Sample Rate > 0

❌ Анимация зависает
   ✅ Проверьте Has Exit Time в Transitions
   ✅ Убедитесь что Loop включен (кроме Death)

❌ Character Animator не находит Animator
   ✅ Убедитесь что компонент Animator добавлен
   ✅ Проверьте порядок компонентов

═══════════════════════════════════════════════════════════════

📚 МЕТОДЫ CharacterAnimator
────────────────────────────────────────────────────────────────

PlayIdle()                - Воспроизвести Idle
PlayMove()                - Воспроизвести Move
PlayAttack()              - Воспроизвести Attack
PlayDeath()               - Воспроизвести Death
Resurrect()               - Воскресить персонажа
IsDead()                  - Проверить мёртв ли
GetCurrentState()         - Получить текущее состояние
SetAnimationSpeed(float)  - Изменить скорость анимации
SetAnimationPaused(bool)  - Поставить на паузу

═══════════════════════════════════════════════════════════════

ВСЁ ГОТОВО! Анимации настроены! 🎬

═══════════════════════════════════════════════════════════════

