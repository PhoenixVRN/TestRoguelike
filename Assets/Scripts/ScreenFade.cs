using UnityEngine;
using UnityEngine.UI;
using DG.Tweening;
using System.Collections;

/// <summary>
/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ DOTween
/// Fade in/out –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
/// </summary>
public class ScreenFade : MonoBehaviour
{
    [Header("–°—Å—ã–ª–∫–∏")]
    [Tooltip("Image –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è (—á—ë—Ä–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω)")]
    [SerializeField] private Image fadeImage;
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è (fade to black)")]
    [SerializeField] private float fadeInDuration = 0.5f;
    
    [Tooltip("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–µ–∏–≤–∞–Ω–∏—è (fade from black)")]
    [SerializeField] private float fadeOutDuration = 0.5f;
    
    [Tooltip("–¶–≤–µ—Ç –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è")]
    [SerializeField] private Color fadeColor = Color.black;
    
    [Tooltip("–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è")]
    [SerializeField] private Ease fadeInEase = Ease.InQuad;
    
    [Tooltip("–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ–∏–≤–∞–Ω–∏—è")]
    [SerializeField] private Ease fadeOutEase = Ease.OutQuad;
    
    [Tooltip("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")]
    [SerializeField] private bool showDebug = false;

    private bool isFading = false;

    private void Awake()
    {
        if (fadeImage == null)
        {
            fadeImage = GetComponent<Image>();
        }

        if (fadeImage != null)
        {
            // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            Color c = fadeColor;
            c.a = 0f;
            fadeImage.color = c;
            fadeImage.gameObject.SetActive(true);
        }
    }

    /// <summary>
    /// –ó–∞—Ç–µ–º–Ω–∏—Ç—å —ç–∫—Ä–∞–Ω (fade to black)
    /// </summary>
    public void FadeIn(System.Action onComplete = null)
    {
        if (fadeImage == null)
        {
            Debug.LogError("Fade Image –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            onComplete?.Invoke();
            return;
        }

        if (isFading)
        {
            DOTween.Kill(fadeImage);
        }

        isFading = true;

        if (showDebug)
        {
            Debug.Log($"üåë –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞... ({fadeInDuration}—Å)");
        }

        fadeImage.gameObject.SetActive(true);
        
        Color targetColor = fadeColor;
        targetColor.a = 1f;

        fadeImage.DOColor(targetColor, fadeInDuration)
            .SetEase(fadeInEase)
            .OnComplete(() =>
            {
                isFading = false;
                
                if (showDebug)
                {
                    Debug.Log("üåë –≠–∫—Ä–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ç–µ–º–Ω—ë–Ω!");
                }
                
                onComplete?.Invoke();
            });
    }

    /// <summary>
    /// –†–∞–∑–≤–µ—è—Ç—å –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ (fade from black)
    /// </summary>
    public void FadeOut(System.Action onComplete = null)
    {
        if (fadeImage == null)
        {
            Debug.LogError("Fade Image –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            onComplete?.Invoke();
            return;
        }

        if (isFading)
        {
            DOTween.Kill(fadeImage);
        }

        isFading = true;

        if (showDebug)
        {
            Debug.Log($"‚òÄÔ∏è –†–∞–∑–≤–µ–∏–≤–∞–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ... ({fadeOutDuration}—Å)");
        }

        Color targetColor = fadeColor;
        targetColor.a = 0f;

        fadeImage.DOColor(targetColor, fadeOutDuration)
            .SetEase(fadeOutEase)
            .OnComplete(() =>
            {
                isFading = false;
                fadeImage.gameObject.SetActive(false);
                
                if (showDebug)
                {
                    Debug.Log("‚òÄÔ∏è –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—è–Ω–æ!");
                }
                
                onComplete?.Invoke();
            });
    }

    /// <summary>
    /// Fade in ‚Üí –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚Üí Fade out
    /// </summary>
    public void FadeInOutWithAction(System.Action action)
    {
        StartCoroutine(FadeInOutCoroutine(action));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞: –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ ‚Üí –î–µ–π—Å—Ç–≤–∏–µ ‚Üí –†–∞–∑–≤–µ–∏–≤–∞–Ω–∏–µ
    /// </summary>
    private IEnumerator FadeInOutCoroutine(System.Action action)
    {
        // –ó–∞—Ç–µ–º–Ω—è–µ–º
        bool fadeInComplete = false;
        FadeIn(() => fadeInComplete = true);
        
        while (!fadeInComplete)
            yield return null;

        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—Å—Ç–∞—Ä—Ç)
        action?.Invoke();

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        yield return new WaitForSeconds(0.1f);

        // –†–∞–∑–≤–µ–∏–≤–∞–µ–º
        FadeOut();
    }

    /// <summary>
    /// –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞—Ç–µ–º–Ω–∏—Ç—å
    /// </summary>
    public void SetBlack()
    {
        if (fadeImage != null)
        {
            Color c = fadeColor;
            c.a = 1f;
            fadeImage.color = c;
            fadeImage.gameObject.SetActive(true);
        }
    }

    /// <summary>
    /// –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–∞–∑–≤–µ—è—Ç—å
    /// </summary>
    public void SetClear()
    {
        if (fadeImage != null)
        {
            Color c = fadeColor;
            c.a = 0f;
            fadeImage.color = c;
            fadeImage.gameObject.SetActive(false);
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–¥—ë—Ç –ª–∏ fade
    /// </summary>
    public bool IsFading()
    {
        return isFading;
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –¢–ï–°–¢–û–í–´–ï –ú–ï–¢–û–î–´
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    [ContextMenu("üåë –¢–ï–°–¢: –ó–∞—Ç–µ–º–Ω–∏—Ç—å —ç–∫—Ä–∞–Ω")]
    private void TestFadeIn()
    {
        FadeIn(() => Debug.Log("üåë –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"));
    }

    [ContextMenu("‚òÄÔ∏è –¢–ï–°–¢: –†–∞–∑–≤–µ—è—Ç—å –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ")]
    private void TestFadeOut()
    {
        FadeOut(() => Debug.Log("‚òÄÔ∏è –†–∞–∑–≤–µ–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"));
    }

    [ContextMenu("üîÑ –¢–ï–°–¢: Fade In ‚Üí Out")]
    private void TestFadeInOut()
    {
        FadeInOutWithAction(() => Debug.Log("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –≤–æ –≤—Ä–µ–º—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è!"));
    }
}

