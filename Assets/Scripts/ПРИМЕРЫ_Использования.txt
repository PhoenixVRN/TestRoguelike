═══════════════════════════════════════════════════════════════
    💡 ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ - WAVE SPAWNER
═══════════════════════════════════════════════════════════════

🎯 ПРИМЕР 1: ПРОСТАЯ ВОЛНА (3 ВРАГА В ФИКСИРОВАННЫХ ПОЗИЦИЯХ)
═══════════════════════════════════════════════════════════════

NewWave.asset:
┌─────────────────────────────────────────────────────────────┐
│ Wave Name: "Первая волна"                                   │
│ Wave Number: 1                                              │
│                                                             │
│ Enemies (Size: 3):                                          │
│                                                             │
│   Element 0:                                                │
│     Enemy Prefab: Enamy                                     │
│     Grid Position: (7, 5)  ← центр справа                  │
│     Random Position: ☐                                      │
│                                                             │
│   Element 1:                                                │
│     Enemy Prefab: Enamy                                     │
│     Grid Position: (8, 3)  ← нижняя часть                  │
│     Random Position: ☐                                      │
│                                                             │
│   Element 2:                                                │
│     Enemy Prefab: Enamy                                     │
│     Grid Position: (9, 7)  ← верхняя часть                 │
│     Random Position: ☐                                      │
└─────────────────────────────────────────────────────────────┘

Результат: 3 врага появятся точно в указанных позициях

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 2: СЛУЧАЙНАЯ ВОЛНА (5 ВРАГОВ В СЛУЧАЙНЫХ ПОЗИЦИЯХ)
═══════════════════════════════════════════════════════════════

Wave_2.asset:
┌─────────────────────────────────────────────────────────────┐
│ Wave Name: "Хаотичная волна"                                │
│ Wave Number: 2                                              │
│                                                             │
│ Enemies (Size: 5):                                          │
│                                                             │
│   Element 0-4: (все одинаковые)                            │
│     Enemy Prefab: Enamy                                     │
│     Grid Position: (0, 0)  ← не важно                      │
│     Random Position: ✓  ← ГЛАВНОЕ!                         │
└─────────────────────────────────────────────────────────────┘

WaveSpawner настройки:
┌─────────────────────────────────────────────────────────────┐
│ Spawn Zone X: (5, 9)  ← только правая сторона              │
│ Spawn Zone Y: (0, 9)  ← вся высота                         │
└─────────────────────────────────────────────────────────────┘

Результат: 5 врагов появятся в случайных позициях
          в зоне X=[5,9], Y=[0,9]

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 3: СМЕШАННАЯ ВОЛНА (БОСС + МИНЬОНЫ)
═══════════════════════════════════════════════════════════════

Wave_Boss.asset:
┌─────────────────────────────────────────────────────────────┐
│ Wave Name: "Босс и свита"                                   │
│ Wave Number: 3                                              │
│                                                             │
│ Enemies (Size: 4):                                          │
│                                                             │
│   Element 0: БОСС (фиксированная позиция)                  │
│     Enemy Prefab: Boss  ← специальный префаб               │
│     Grid Position: (9, 5)  ← центр правого края            │
│     Random Position: ☐                                      │
│                                                             │
│   Element 1-3: Миньоны (случайные)                         │
│     Enemy Prefab: Enamy                                     │
│     Grid Position: (0, 0)                                   │
│     Random Position: ✓                                      │
└─────────────────────────────────────────────────────────────┘

Результат: 1 босс в фиксированной позиции + 3 миньона вокруг

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 4: ПРОГРЕССИЯ ВОЛН (3 ВОЛНЫ ПОДРЯД)
═══════════════════════════════════════════════════════════════

WaveSpawner:
┌─────────────────────────────────────────────────────────────┐
│ Waves (Size: 3):                                            │
│   Element 0: Wave_1  (легкая - 3 врага)                    │
│   Element 1: Wave_2  (средняя - 5 врагов)                  │
│   Element 2: Wave_3  (сложная - 8 врагов)                  │
└─────────────────────────────────────────────────────────────┘

Код в GameManager:
```csharp
private int currentWave = 0;

public void OnEnemiesDefeated()
{
    // Все враги убиты
    currentWave++;
    
    if (currentWave < waveSpawner.GetWaveCount())
    {
        // Есть ещё волны
        StartCoroutine(SpawnNextWaveWithDelay());
    }
    else
    {
        // Победа!
        ShowVictoryScreen();
    }
}

private IEnumerator SpawnNextWaveWithDelay()
{
    yield return new WaitForSeconds(2f);
    
    Debug.Log($"Волна {currentWave + 1} приближается!");
    waveSpawner.SpawnWave(currentWave);
    
    while (waveSpawner.IsSpawning())
        yield return null;
    
    StartBattle();
}
```

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 5: РАЗНЫЕ ТИПЫ ВРАГОВ
═══════════════════════════════════════════════════════════════

Создайте разные конфиги:
┌──────────────────────────────────────────────────────────┐
│ 1. SkeletonWarrior.asset                                 │
│    - HP: 80, Damage: 10, Speed: 2                        │
│    - Type: Melee, Team: 1                                │
│                                                          │
│ 2. SkeletonArcher.asset                                  │
│    - HP: 50, Damage: 15, Speed: 2                        │
│    - Attack Range: 5 (дальний бой!)                      │
│    - Type: Ranged, Team: 1                               │
│                                                          │
│ 3. SkeletonTank.asset                                    │
│    - HP: 200, Damage: 5, Speed: 1                        │
│    - Type: Tank, Team: 1                                 │
└──────────────────────────────────────────────────────────┘

Wave_Mixed.asset:
┌─────────────────────────────────────────────────────────────┐
│ Enemies (Size: 6):                                          │
│   Element 0-1: Warrior (спереди)                           │
│   Element 2-3: Archer (сзади)                              │
│   Element 4-5: Tank (защищают лучников)                    │
└─────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 6: АВТОМАТИЧЕСКИЙ СПАВН ПРИ СТАРТЕ
═══════════════════════════════════════════════════════════════

WaveSpawner:
┌─────────────────────────────────────────────────────────────┐
│ Spawn On Start: ✓  ← включите эту галочку                 │
└─────────────────────────────────────────────────────────────┘

Результат: Как только игра запустится (Play), первая волна
          автоматически заспавнится без нажатия кнопок!

Используйте для:
  - Тестирования
  - Режима "бесконечных волн"
  - Автоматических демо-боев

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 7: РУЧНОЙ СПАВН ИЗ КОДА
═══════════════════════════════════════════════════════════════

```csharp
using UnityEngine;

public class CustomSpawner : MonoBehaviour
{
    [SerializeField] private WaveSpawner waveSpawner;
    [SerializeField] private WaveConfig customWave;
    
    // Заспавнить волну по индексу
    public void SpawnWave1()
    {
        waveSpawner.SpawnWave(0);
    }
    
    // Заспавнить следующую
    public void SpawnNext()
    {
        waveSpawner.SpawnNextWave();
    }
    
    // Заспавнить кастомную волну
    public void SpawnCustom()
    {
        waveSpawner.SpawnWaveFromConfig(customWave);
    }
    
    // Очистить всех врагов
    public void ClearAll()
    {
        waveSpawner.ClearAllEnemies();
    }
    
    // Проверить статус
    public void CheckStatus()
    {
        if (waveSpawner.IsSpawning())
        {
            Debug.Log("Сейчас идёт спавн...");
        }
        else
        {
            Debug.Log($"Спавн завершён. Волна {waveSpawner.GetCurrentWaveIndex()}");
        }
    }
}
```

Назначьте эти методы на кнопки UI!

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 8: ДИНАМИЧЕСКОЕ СОЗДАНИЕ ВОЛНЫ
═══════════════════════════════════════════════════════════════

```csharp
using UnityEngine;

public class DynamicWaveCreator : MonoBehaviour
{
    [SerializeField] private GameObject enemyPrefab;
    [SerializeField] private int enemyCount = 5;
    
    public WaveConfig CreateRandomWave()
    {
        // Создаём новый конфиг в runtime
        WaveConfig wave = ScriptableObject.CreateInstance<WaveConfig>();
        wave.waveName = "Random Wave";
        wave.waveNumber = 1;
        
        // Заполняем врагами
        for (int i = 0; i < enemyCount; i++)
        {
            var enemy = new WaveConfig.EnemySpawnData();
            enemy.enemyPrefab = enemyPrefab;
            enemy.randomPosition = true; // Случайные позиции
            
            wave.enemies.Add(enemy);
        }
        
        return wave;
    }
    
    // Использование:
    public void SpawnRandomWave()
    {
        WaveConfig wave = CreateRandomWave();
        FindObjectOfType<WaveSpawner>().SpawnWaveFromConfig(wave);
    }
}
```

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 9: АДАПТИВНАЯ СЛОЖНОСТЬ
═══════════════════════════════════════════════════════════════

```csharp
public class AdaptiveDifficulty : MonoBehaviour
{
    [SerializeField] private WaveSpawner waveSpawner;
    [SerializeField] private CharacterConfig baseEnemyConfig;
    
    private int currentWaveNumber = 0;
    
    public void SpawnScaledWave()
    {
        currentWaveNumber++;
        
        // Увеличиваем сложность с каждой волной
        int enemyCount = 3 + currentWaveNumber; // 4, 5, 6...
        float hpMultiplier = 1 + (currentWaveNumber * 0.2f); // 1.2, 1.4...
        float dmgMultiplier = 1 + (currentWaveNumber * 0.1f); // 1.1, 1.2...
        
        Debug.Log($"Волна {currentWaveNumber}: " +
                  $"{enemyCount} врагов, " +
                  $"HP x{hpMultiplier}, " +
                  $"DMG x{dmgMultiplier}");
        
        // Создаём адаптивную волну
        WaveConfig wave = CreateScaledWave(enemyCount, hpMultiplier, dmgMultiplier);
        waveSpawner.SpawnWaveFromConfig(wave);
    }
    
    private WaveConfig CreateScaledWave(int count, float hpMult, float dmgMult)
    {
        // Клонируем базовый конфиг и масштабируем
        CharacterConfig scaled = baseEnemyConfig.Clone();
        scaled.maxHealth = Mathf.RoundToInt(baseEnemyConfig.maxHealth * hpMult);
        scaled.damage = Mathf.RoundToInt(baseEnemyConfig.damage * dmgMult);
        
        // TODO: Создать WaveConfig с этим конфигом
        // ...
        
        return null; // Заглушка
    }
}
```

═══════════════════════════════════════════════════════════════
🎯 ПРИМЕР 10: ОТСЛЕЖИВАНИЕ ПРОГРЕССА ВОЛНЫ
═══════════════════════════════════════════════════════════════

```csharp
public class WaveTracker : MonoBehaviour
{
    [SerializeField] private WaveSpawner waveSpawner;
    
    private void Update()
    {
        // Проверяем состояние спавна
        if (waveSpawner.IsSpawning())
        {
            // Можно показать UI "Враги появляются..."
            return;
        }
        
        // Считаем живых врагов
        int aliveEnemies = CountAliveEnemies();
        
        if (aliveEnemies == 0)
        {
            OnWaveCompleted();
        }
    }
    
    private int CountAliveEnemies()
    {
        CharacterController[] all = FindObjectsOfType<CharacterController>();
        int count = 0;
        
        foreach (var character in all)
        {
            if (character.GetTeam() == 1 && !character.IsDead())
            {
                count++;
            }
        }
        
        return count;
    }
    
    private void OnWaveCompleted()
    {
        Debug.Log("Волна завершена! Все враги повержены!");
        
        // Спавним следующую волну
        if (waveSpawner.GetCurrentWaveIndex() < waveSpawner.GetWaveCount() - 1)
        {
            StartCoroutine(SpawnNextWaveWithDelay());
        }
        else
        {
            Debug.Log("ПОБЕДА! Все волны пройдены!");
        }
    }
    
    private IEnumerator SpawnNextWaveWithDelay()
    {
        yield return new WaitForSeconds(3f);
        waveSpawner.SpawnNextWave();
    }
}
```

═══════════════════════════════════════════════════════════════
💡 СОВЕТЫ ПО ДИЗАЙНУ ВОЛН
═══════════════════════════════════════════════════════════════

1. Простые волны → Сложные волны
   Волна 1: 3 врага
   Волна 2: 5 врагов
   Волна 3: 8 врагов + 1 босс

2. Разнообразие типов
   Не только воины! Добавьте лучников, танков, магов

3. Паттерны размещения
   - Линия: все враги в ряд
   - Треугольник: танк спереди, лучники сзади
   - Окружение: враги окружают героев

4. Динамическая сложность
   Масштабируйте HP/Damage в зависимости от прогресса игрока

5. Тестируйте баланс
   Включите Show Debug и смотрите кто побеждает

═══════════════════════════════════════════════════════════════

✅ ГОТОВО! Используйте эти примеры для создания своих волн!

═══════════════════════════════════════════════════════════════

